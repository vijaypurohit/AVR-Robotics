
led4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002c8  00000000  00000000  00000151  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e8  00000000  00000000  00000419  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000245  00000000  00000000  00000501  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b8  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000170  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	44 c0       	rjmp	.+136    	; 0xbe <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>
main()
{
 DDRB=0b11111111;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
 while(1)
 {
 PORTB=0b00010000;
  3c:	b0 e1       	ldi	r27, 0x10	; 16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  3e:	29 e1       	ldi	r18, 0x19	; 25
  40:	30 e0       	ldi	r19, 0x00	; 0
 _delay_ms(4000);
 PORTB=0b00011000;
  42:	a8 e1       	ldi	r26, 0x18	; 24
 _delay_ms(4000) ;
 PORTB=0b00011100;
  44:	7c e1       	ldi	r23, 0x1C	; 28
 _delay_ms(4000);
 PORTB=0b00001110;
  46:	6e e0       	ldi	r22, 0x0E	; 14
 _delay_ms(4000);
 PORTB=0b00000110;
  48:	56 e0       	ldi	r21, 0x06	; 6
 _delay_ms(4000);
 PORTB=0b00000010;
  4a:	42 e0       	ldi	r20, 0x02	; 2
main()
{
 DDRB=0b11111111;
 while(1)
 {
 PORTB=0b00010000;
  4c:	b8 bb       	out	0x18, r27	; 24
  4e:	80 e4       	ldi	r24, 0x40	; 64
  50:	9c e9       	ldi	r25, 0x9C	; 156
  52:	f9 01       	movw	r30, r18
  54:	31 97       	sbiw	r30, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <__SREG__+0x15>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  58:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  5a:	d9 f7       	brne	.-10     	; 0x52 <__SREG__+0x13>
 _delay_ms(4000);
 PORTB=0b00011000;
  5c:	a8 bb       	out	0x18, r26	; 24
  5e:	80 e4       	ldi	r24, 0x40	; 64
  60:	9c e9       	ldi	r25, 0x9C	; 156
  62:	f9 01       	movw	r30, r18
  64:	31 97       	sbiw	r30, 0x01	; 1
  66:	f1 f7       	brne	.-4      	; 0x64 <__SREG__+0x25>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  68:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  6a:	d9 f7       	brne	.-10     	; 0x62 <__SREG__+0x23>
 _delay_ms(4000) ;
 PORTB=0b00011100;
  6c:	78 bb       	out	0x18, r23	; 24
  6e:	80 e4       	ldi	r24, 0x40	; 64
  70:	9c e9       	ldi	r25, 0x9C	; 156
  72:	f9 01       	movw	r30, r18
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <__SREG__+0x35>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7a:	d9 f7       	brne	.-10     	; 0x72 <__SREG__+0x33>
 _delay_ms(4000);
 PORTB=0b00001110;
  7c:	68 bb       	out	0x18, r22	; 24
  7e:	80 e4       	ldi	r24, 0x40	; 64
  80:	9c e9       	ldi	r25, 0x9C	; 156
  82:	f9 01       	movw	r30, r18
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <__SREG__+0x45>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  88:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8a:	d9 f7       	brne	.-10     	; 0x82 <__SREG__+0x43>
 _delay_ms(4000);
 PORTB=0b00000110;
  8c:	58 bb       	out	0x18, r21	; 24
  8e:	80 e4       	ldi	r24, 0x40	; 64
  90:	9c e9       	ldi	r25, 0x9C	; 156
  92:	f9 01       	movw	r30, r18
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <__SREG__+0x55>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9a:	d9 f7       	brne	.-10     	; 0x92 <__SREG__+0x53>
 _delay_ms(4000);
 PORTB=0b00000010;
  9c:	48 bb       	out	0x18, r20	; 24
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	9c e9       	ldi	r25, 0x9C	; 156
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <__SREG__+0x65>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__SREG__+0x63>
 _delay_ms(4000);
 PORTB=0b00000000;
  ac:	18 ba       	out	0x18, r1	; 24
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	9c e9       	ldi	r25, 0x9C	; 156
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <__SREG__+0x75>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__SREG__+0x73>
  bc:	c7 cf       	rjmp	.-114    	; 0x4c <__SREG__+0xd>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
