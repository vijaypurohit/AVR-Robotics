
line_follower_atmega_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000098  00000000  00000000  00000157  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005f  00000000  00000000  000001ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000e2  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c6  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ec       	ldi	r30, 0xC8	; 200
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	34 c0       	rjmp	.+104    	; 0xc4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include <util/delay.h>    // includes delay header file  


int main(void)
{
DDRB=0b11111111;     //PORTB as output Port connected to motors
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	87 bb       	out	0x17, r24	; 23
DDRC=0b0000000;      //PORTC Input port connected to Sensors
  62:	14 ba       	out	0x14, r1	; 20
   while(1)    // infinite loop
   { 
   left_sensor=PINC&0b0010000;    // mask PC4 bit of Port C
   right_sensor=PINC&0b0100000;   // mask PC5 bit of Port C
	 
	 if((left_sensor==0b0000000) & (right_sensor==0b0000000)) //if both sensors "off"
  64:	a1 e0       	ldi	r26, 0x01	; 1
     }

     if((left_sensor==0b0010000) & (right_sensor==0b0100000)) //if both sensors "on"
     {
      
	 PORTB=0b00001001; // move straight
  66:	f9 e0       	ldi	r31, 0x09	; 9
     }

     if((left_sensor==0b0010000)&(right_sensor==0b0000000))
     {
     
	 PORTB=0b00001000; // turn right
  68:	e8 e0       	ldi	r30, 0x08	; 8

int left_sensor=0, right_sensor=0;

   while(1)    // infinite loop
   { 
   left_sensor=PINC&0b0010000;    // mask PC4 bit of Port C
  6a:	83 b3       	in	r24, 0x13	; 19
  6c:	90 e0       	ldi	r25, 0x00	; 0
   right_sensor=PINC&0b0100000;   // mask PC5 bit of Port C
  6e:	23 b3       	in	r18, 0x13	; 19
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	20 72       	andi	r18, 0x20	; 32
  74:	30 70       	andi	r19, 0x00	; 0
	 
	 if((left_sensor==0b0000000) & (right_sensor==0b0000000)) //if both sensors "off"
  76:	50 e0       	ldi	r21, 0x00	; 0
  78:	bc 01       	movw	r22, r24
  7a:	60 71       	andi	r22, 0x10	; 16
  7c:	70 70       	andi	r23, 0x00	; 0
  7e:	84 ff       	sbrs	r24, 4
  80:	51 e0       	ldi	r21, 0x01	; 1
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	21 15       	cp	r18, r1
  86:	31 05       	cpc	r19, r1
  88:	09 f4       	brne	.+2      	; 0x8c <main+0x2e>
  8a:	91 e0       	ldi	r25, 0x01	; 1
  8c:	55 23       	and	r21, r21
  8e:	11 f0       	breq	.+4      	; 0x94 <main+0x36>
  90:	91 11       	cpse	r25, r1
     {
     
	 PORTB=0b00000000; // stop
  92:	18 ba       	out	0x18, r1	; 24
			
     }

     if((left_sensor==0b0010000) & (right_sensor==0b0100000)) //if both sensors "on"
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	60 31       	cpi	r22, 0x10	; 16
  98:	71 05       	cpc	r23, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <main+0x40>
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	20 32       	cpi	r18, 0x20	; 32
  a2:	31 05       	cpc	r19, r1
  a4:	09 f4       	brne	.+2      	; 0xa8 <main+0x4a>
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	44 23       	and	r20, r20
  aa:	11 f0       	breq	.+4      	; 0xb0 <main+0x52>
  ac:	81 11       	cpse	r24, r1
     {
      
	 PORTB=0b00001001; // move straight
  ae:	f8 bb       	out	0x18, r31	; 24
               
     }
	
     if((left_sensor==0b0000000)&(right_sensor==0b0100000))
  b0:	55 23       	and	r21, r21
  b2:	11 f0       	breq	.+4      	; 0xb8 <main+0x5a>
  b4:	81 11       	cpse	r24, r1
     {
     
	 PORTB=0b00000001; // turn left
  b6:	a8 bb       	out	0x18, r26	; 24
	      
     }

     if((left_sensor==0b0010000)&(right_sensor==0b0000000))
  b8:	44 23       	and	r20, r20
  ba:	b9 f2       	breq	.-82     	; 0x6a <main+0xc>
  bc:	99 23       	and	r25, r25
  be:	a9 f2       	breq	.-86     	; 0x6a <main+0xc>
     {
     
	 PORTB=0b00001000; // turn right
  c0:	e8 bb       	out	0x18, r30	; 24
  c2:	d3 cf       	rjmp	.-90     	; 0x6a <main+0xc>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
