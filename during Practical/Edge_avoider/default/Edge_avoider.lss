
Edge_avoider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000037b  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000106  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002c3  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c8  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000278  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	6c c0       	rjmp	.+216    	; 0x10e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>

main()
{
  38:	0f 93       	push	r16
  3a:	1f 93       	push	r17
 DDRB=0b11111111;     
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	87 bb       	out	0x17, r24	; 23
 DDRC=0b0000000; 
  40:	14 ba       	out	0x14, r1	; 20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  42:	6c e2       	ldi	r22, 0x2C	; 44
  44:	71 e0       	ldi	r23, 0x01	; 1
   }
  if((ls==0b0001000)&&(rs==0b0000000))
   {
    PORTB=0b00000000;
    _delay_ms(1000);
	PORTB=0b00001100;
  46:	ac e0       	ldi	r26, 0x0C	; 12
	_delay_ms(1000);
	PORTB=0b00010000;
  48:	b0 e1       	ldi	r27, 0x10	; 16
  ls=PINC&0b0001000; 
  rs=PINC&0b0000001;
       
   if((ls==0b0001000)&&(rs==0b0000001))
   {
    PORTB=0b00010010;
  4a:	02 e1       	ldi	r16, 0x12	; 18
   {
    PORTB=0b00000000;
    _delay_ms(1000);
	PORTB=0b00001100;
	_delay_ms(1000);
	PORTB=0b00000010;
  4c:	12 e0       	ldi	r17, 0x02	; 2
  
 int ls, rs;
 
 while(1)
 {
  ls=PINC&0b0001000; 
  4e:	83 b3       	in	r24, 0x13	; 19
  50:	90 e0       	ldi	r25, 0x00	; 0
  rs=PINC&0b0000001;
  52:	23 b3       	in	r18, 0x13	; 19
  54:	30 e0       	ldi	r19, 0x00	; 0
  56:	21 70       	andi	r18, 0x01	; 1
  58:	30 70       	andi	r19, 0x00	; 0
       
   if((ls==0b0001000)&&(rs==0b0000001))
  5a:	ac 01       	movw	r20, r24
  5c:	48 70       	andi	r20, 0x08	; 8
  5e:	50 70       	andi	r21, 0x00	; 0
  60:	83 ff       	sbrs	r24, 3
  62:	05 c0       	rjmp	.+10     	; 0x6e <__SREG__+0x2f>
  64:	21 30       	cpi	r18, 0x01	; 1
  66:	31 05       	cpc	r19, r1
  68:	01 f5       	brne	.+64     	; 0xaa <__SREG__+0x6b>
   {
    PORTB=0b00010010;
  6a:	08 bb       	out	0x18, r16	; 24
  6c:	f0 cf       	rjmp	.-32     	; 0x4e <__SREG__+0xf>
    }
  if((ls==0b0000000)&&(rs==0b0000000))
  6e:	45 2b       	or	r20, r21
  70:	71 f7       	brne	.-36     	; 0x4e <__SREG__+0xf>
  72:	23 2b       	or	r18, r19
  74:	09 f0       	breq	.+2      	; 0x78 <__SREG__+0x39>
  76:	32 c0       	rjmp	.+100    	; 0xdc <__SREG__+0x9d>
   {
    PORTB=0b00000000;
  78:	18 ba       	out	0x18, r1	; 24
  7a:	80 e1       	ldi	r24, 0x10	; 16
  7c:	97 e2       	ldi	r25, 0x27	; 39
  7e:	fb 01       	movw	r30, r22
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <__SREG__+0x41>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  86:	d9 f7       	brne	.-10     	; 0x7e <__SREG__+0x3f>
	_delay_ms(1000);
	PORTB=0b00001100;
  88:	a8 bb       	out	0x18, r26	; 24
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	97 e2       	ldi	r25, 0x27	; 39
  8e:	fb 01       	movw	r30, r22
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <__SREG__+0x51>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d9 f7       	brne	.-10     	; 0x8e <__SREG__+0x4f>
	_delay_ms(1000);
	PORTB=0b00010000;
  98:	b8 bb       	out	0x18, r27	; 24
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	97 e2       	ldi	r25, 0x27	; 39
  9e:	fb 01       	movw	r30, r22
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <__SREG__+0x61>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <__SREG__+0x5f>
  a8:	d2 cf       	rjmp	.-92     	; 0x4e <__SREG__+0xf>
	_delay_ms(1000);
	
   }
  if((ls==0b0001000)&&(rs==0b0000000))
   {
    PORTB=0b00000000;
  aa:	18 ba       	out	0x18, r1	; 24
  ac:	80 e1       	ldi	r24, 0x10	; 16
  ae:	97 e2       	ldi	r25, 0x27	; 39
  b0:	fb 01       	movw	r30, r22
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <__SREG__+0x73>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__SREG__+0x71>
    _delay_ms(1000);
	PORTB=0b00001100;
  ba:	a8 bb       	out	0x18, r26	; 24
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	97 e2       	ldi	r25, 0x27	; 39
  c0:	fb 01       	movw	r30, r22
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <__SREG__+0x83>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__SREG__+0x81>
	_delay_ms(1000);
	PORTB=0b00010000;
  ca:	b8 bb       	out	0x18, r27	; 24
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	97 e2       	ldi	r25, 0x27	; 39
  d0:	fb 01       	movw	r30, r22
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__SREG__+0x93>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__SREG__+0x91>
  da:	b9 cf       	rjmp	.-142    	; 0x4e <__SREG__+0xf>
	_delay_ms(1000);
   }

   if((ls==0b0000000)&&(rs==0b0000001))
   {
    PORTB=0b00000000;
  dc:	18 ba       	out	0x18, r1	; 24
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	97 e2       	ldi	r25, 0x27	; 39
  e2:	fb 01       	movw	r30, r22
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <__SREG__+0xa5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__SREG__+0xa3>
    _delay_ms(1000);
	PORTB=0b00001100;
  ec:	a8 bb       	out	0x18, r26	; 24
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	97 e2       	ldi	r25, 0x27	; 39
  f2:	fb 01       	movw	r30, r22
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <__SREG__+0xb5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d9 f7       	brne	.-10     	; 0xf2 <__SREG__+0xb3>
	_delay_ms(1000);
	PORTB=0b00000010;
  fc:	18 bb       	out	0x18, r17	; 24
  fe:	80 e1       	ldi	r24, 0x10	; 16
 100:	97 e2       	ldi	r25, 0x27	; 39
 102:	fb 01       	movw	r30, r22
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <__SREG__+0xc5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	d9 f7       	brne	.-10     	; 0x102 <__SREG__+0xc3>
 10c:	a0 cf       	rjmp	.-192    	; 0x4e <__SREG__+0xf>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
