
DTMF_controled_robot_atmega8_mini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000094  00000000  00000000  0000015d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005f  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000103  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bf  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ec       	ldi	r30, 0xCE	; 206
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	37 c0       	rjmp	.+110    	; 0xca <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:

int main(void)
{
int d=0;
int b=0;      
DDRB=0b11111111;   //PORTB as output Port connected to motors
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	87 bb       	out	0x17, r24	; 23
DDRD=0b00000000;   //PORTD Input port connected to DTMF decoder IC
  62:	11 ba       	out	0x11, r1	; 17
b=PINB&0b00000001; // masking PB0 of PORT B
d=PIND&0b11100000; // masking PD5, PD6, PD7 of PORT D

if(d==0b10000000 && b==0b00000000)           //if Key 2 of cell phone pressed
{
PORTB=0b00010010;    // move straight
  64:	72 e1       	ldi	r23, 0x12	; 18
PORTB=0b000010000;   // turn right
}

if(d==0b00100000 && b==0b00000000)          // if Key 8 of cell phone pressed
{
PORTB=0b00001100;    // move back
  66:	6c e0       	ldi	r22, 0x0C	; 12
PORTB=0b00000010;    // turn left
}

if(d==0b11000000 && b==0b00000000)          // if Key 6 of cell phone pressed
{
PORTB=0b000010000;   // turn right
  68:	50 e1       	ldi	r21, 0x10	; 16
PORTB=0b00010010;    // move straight
}

if(d==0b01000000 && b==0b00000000)          // if Key 4 of cell phone pressed
{
PORTB=0b00000010;    // turn left
  6a:	42 e0       	ldi	r20, 0x02	; 2
DDRB=0b11111111;   //PORTB as output Port connected to motors
DDRD=0b00000000;   //PORTD Input port connected to DTMF decoder IC

while(1)           // infinite loop
{
b=PINB&0b00000001; // masking PB0 of PORT B
  6c:	86 b3       	in	r24, 0x16	; 22
  6e:	28 2f       	mov	r18, r24
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	21 70       	andi	r18, 0x01	; 1
  74:	30 70       	andi	r19, 0x00	; 0
d=PIND&0b11100000; // masking PD5, PD6, PD7 of PORT D
  76:	80 b3       	in	r24, 0x10	; 16
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	80 7e       	andi	r24, 0xE0	; 224
  7c:	90 70       	andi	r25, 0x00	; 0

if(d==0b10000000 && b==0b00000000)           //if Key 2 of cell phone pressed
  7e:	80 38       	cpi	r24, 0x80	; 128
  80:	91 05       	cpc	r25, r1
  82:	29 f4       	brne	.+10     	; 0x8e <main+0x30>
  84:	21 15       	cp	r18, r1
  86:	31 05       	cpc	r19, r1
  88:	c1 f4       	brne	.+48     	; 0xba <main+0x5c>
{
PORTB=0b00010010;    // move straight
  8a:	78 bb       	out	0x18, r23	; 24
  8c:	ef cf       	rjmp	.-34     	; 0x6c <main+0xe>
}

if(d==0b01000000 && b==0b00000000)          // if Key 4 of cell phone pressed
  8e:	80 34       	cpi	r24, 0x40	; 64
  90:	91 05       	cpc	r25, r1
  92:	29 f4       	brne	.+10     	; 0x9e <main+0x40>
  94:	21 15       	cp	r18, r1
  96:	31 05       	cpc	r19, r1
  98:	49 f4       	brne	.+18     	; 0xac <main+0x4e>
{
PORTB=0b00000010;    // turn left
  9a:	48 bb       	out	0x18, r20	; 24
  9c:	e7 cf       	rjmp	.-50     	; 0x6c <main+0xe>
}

if(d==0b11000000 && b==0b00000000)          // if Key 6 of cell phone pressed
  9e:	80 3c       	cpi	r24, 0xC0	; 192
  a0:	91 05       	cpc	r25, r1
  a2:	21 f4       	brne	.+8      	; 0xac <main+0x4e>
  a4:	23 2b       	or	r18, r19
  a6:	11 f7       	brne	.-60     	; 0x6c <main+0xe>
{
PORTB=0b000010000;   // turn right
  a8:	58 bb       	out	0x18, r21	; 24
  aa:	e0 cf       	rjmp	.-64     	; 0x6c <main+0xe>
}

if(d==0b00100000 && b==0b00000000)          // if Key 8 of cell phone pressed
  ac:	80 32       	cpi	r24, 0x20	; 32
  ae:	91 05       	cpc	r25, r1
  b0:	21 f4       	brne	.+8      	; 0xba <main+0x5c>
  b2:	23 2b       	or	r18, r19
  b4:	d9 f6       	brne	.-74     	; 0x6c <main+0xe>
{
PORTB=0b00001100;    // move back
  b6:	68 bb       	out	0x18, r22	; 24
  b8:	d9 cf       	rjmp	.-78     	; 0x6c <main+0xe>
}

if(d==0b01000000 && b==0b00000001)          // if Key 5 of cell phone pressed
  ba:	80 34       	cpi	r24, 0x40	; 64
  bc:	91 05       	cpc	r25, r1
  be:	b1 f6       	brne	.-84     	; 0x6c <main+0xe>
  c0:	21 30       	cpi	r18, 0x01	; 1
  c2:	31 05       	cpc	r19, r1
  c4:	99 f6       	brne	.-90     	; 0x6c <main+0xe>
{
PORTB=0b00000000;    //stop
  c6:	18 ba       	out	0x18, r1	; 24
  c8:	d1 cf       	rjmp	.-94     	; 0x6c <main+0xe>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
